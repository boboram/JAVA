스택 후위 표기식 계산기

* 컴퓨터가 계산하는 방식
* 일반적으로 우리가 사용하는 방식은 중위표기식
* 후위 표기식을 괄호가 없음
* 연산자가 숫자 뒤에 위치함
  - 중위 표기식 : (2+5)*3*(2+1)
  - 후위 표기식 : 25+3*21+*

중위 표기식 -> 후위 표기식 전환 조건
1. 피연산자(숫자)는 스택에 쌓지 않고 바로 출력한다
2. ')' 닫는 괄호를 만났다면 스택에서 '(' 여는 괄호가 나올 때 까지 반환(pop) 후 출력한다
단 ')' 닫는 괄호는 스택에 쌓이지 않고 '(' 여는 괄호도 반환되었다고 출력하지 않는다
3. 연산자일 경우, 현재 최상위 스택에 있는 연산자의 순위가 현재 스택에 쌓아야하는 연산자의 순위보다 높다면 반환 후 출력한다(높은 순위가 없을 때 까지)
단 '(' 여는 괄호는 우선 순위 검사없이 바로 스택에 쌓는다
4. 더 이상 읽을 중위 표기식이 없다면 스택에 있는 모든 데이터를 반환 후 출력한다

연산자 우선 순위
* 가장 높음 : *, /
* 중간 : +, -
* 깍두기 : ( 
깍두기는 저장되지 않는다.

후위 표기식 계산법
*중위 표기식을 후위 표기식으로만 바꾸면 끝나는게 아니라 계산도 해야한다

1. 피연산자(숫자)는 스택에 쌓는다
2. 연산자를 만나면 스택에서 2회 반환(pop)을 하고 [두번째 반환된 데이터 (연산) 첫번째 반환된 데이터]의 결과를 다시 스택에 쌓는다
3. 첫번째 데이터가 나중에 들어간 데이터(최상단에 위치한 데이터), 두번째 반환된 데이터가 먼저 들어간 데이터이다

C언어와 자바의 구현 방식에서의 차이점
  - String 타입이 없는 C에서는 char배열 혹은 포인터를 사용하지만 자바에서는 String 타입이 있기 때문에 해당 배열의 인덱스 변수가 필요 없음
  - 자바 switch~case 문법에서 case 변수:를 사용하면 인식못하는 문제가 발생하여 if로 대체하여 사용함 ==> case '*': 는 가능, case MULTIPLY:은 불가능
  - boolean 타입이 없는 C에서는 판별값을 int로 받아오지만 자바에서는 true, false값으로 반환시킬 수 있음.
  